from ..schema import *
from ..service import *
from ..utils import *
from ..models import *
from ..config import *
from ..ssr import *
from fastapi import APIRouter, File, UploadFile
from boto3 import client

class GenerateContentRequest(BaseModel):
    blog_prompt: str
    image_prompt: str
    user: str
    namespace: str

class UploadRequest(BaseModel):
    user: str
    file: UploadFile
    bucket: str
    key: str
    bucket_name: str
    size: int
    content_type: str

s3 = client("s3")




class ContentRouter(APIRouter):
    def __init__(self,*args,**kwargs):
        super().__init__(tags=["content"],*args,**kwargs)
        
        @self.post("/content")
        async def create_blogpost(request: GenerateContentRequest,namespace:str):
            """Creates a blogpost with a cover image from a blog prompt and an image prompt"""
            bucket_name = "images-aiofauna"
            blogpost_webpage = BlogPostWebPage(**request.dict())
            image_url = await CreateImageRequest(prompt=request.image_prompt).run()
            async with ClientSession() as session:
                async with session.get(image_url) as resp:  # type: ignore
                    res = await resp.read()
                    id_ = str(uuid4())
                    s3.put_object(
                        Bucket=bucket_name,
                        Key=f"{blogpost_webpage.user}/{id_}.png",  # type: ignore
                        Body=res,
                        ACL="public-read",
                        ContentType="image/png",
                    )
                    blogpost_webpage.image = f"https://s3.amazonaws.com/{bucket_name}/{blogpost_webpage.user}/{id_}.png"
                    response = await blogpost_webpage.run()
                    queue = MessageQueue(namespace=namespace)
                    await queue.pub(message=to_json(response))
                    return {"status":"success","message":f"message sent to {namespace}"}

        @self.get("/content")
        async def list_content(user: str) -> List[BlogPostWebPage]:
            """List all the content generated by a user"""
            response = await BlogPostWebPage.find_many(user=user)
            logger.info(response)
            for i in response:
                if i.content is not None:
                    i.content = markdown(i.content)
            return response

        @self.delete("/content")
        async def delete_content(id: str) -> bool:
            """Deletes all the content generated by a user"""
            return await BlogPostWebPage.delete(id)

        @self.post("/upload")
        async def upload_image(user:str,bucket:str,size:float,file:UploadFile = File(...)):
            """Uploads an asset to S3"""
            asset = await UploadRequest(
                user=user,
                file=file,
                bucket=bucket,  
                key=f"{user}/{file.filename}",
                bucket_name="images-aiofauna",
                size=size

            )
            s3.put_object(
                Bucket=asset.bucket_name,
                Key=asset.key,
                Body=asset.file.file.read(),
                ACL="public-read",
                ContentType=asset.file.content_type,
            )
            url = f"https://s3.amazonaws.com/{asset.bucket_name}/{asset.key}"
            return await Upload(
                user=asset.user,  # type: ignore
                name=asset.file.filename,  # type: ignore
                key=asset.key,  # type: ignore
                bucket=asset.bucket,  # type: ignore
                size=asset.size,  # type: ignore
                content_type=asset.file.content_type,  # type: ignore
                url=url,  # type: ignore
            ).save()